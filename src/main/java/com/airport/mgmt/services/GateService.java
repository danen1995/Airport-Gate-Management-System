/*
* This code has been generated by the Rebel: a code generator for modern Java.
* 
* Drop us a line or two at feedback@archetypesoftware.com: we would love to hear from you!
*/

package com.airport.mgmt.services;

import com.airport.mgmt.domain.Gate;
import com.airport.mgmt.repositories.GateRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.web.server.ResponseStatusException;

import java.time.LocalTime;
import java.util.List;

@Service
public class GateService {
    private static final Logger logger = LoggerFactory.getLogger(GateService.class);

    private final GateRepository repository;

    public GateService(GateRepository repository) {
        this.repository = repository;
    }

    public Gate findAvailableGate() {
        List<Gate> availableGates =
                repository.findAllByAvailableFromLessThanAndAvailableToGreaterThanAndInUse(LocalTime.now(), LocalTime.now(), false);
        if (!availableGates.isEmpty()) return availableGates.get(0);
        else throw new ResponseStatusException(HttpStatus.NOT_FOUND, "All gates are busy at the moment!");
    }

    public void makeGateAvailable(Long gateId) {
        Gate gate = repository.findById(gateId)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Cannot find Gate by " + gateId));

        if(!gate.isInUse()) throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "The requested gate was already available and waits for a plane!");

        gate.setInUse(false);
    }

    public void updateGateTimeAvailability(String gateName, LocalTime availableFrom, LocalTime availableTo) {
        Gate gate = repository.findByGateName(gateName)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND,
                        "Cannot find Gate by " + gateName));

        gate.setAvailableFrom(availableFrom);
        gate.setAvailableTo(availableTo);
    }
}