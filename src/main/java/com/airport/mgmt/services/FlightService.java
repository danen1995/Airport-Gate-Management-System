/*
* This code has been generated by the Rebel: a code generator for modern Java.
* 
* Drop us a line or two at feedback@archetypesoftware.com: we would love to hear from you!
*/

package com.airport.mgmt.services;

import com.airport.mgmt.domain.Flight;
import com.airport.mgmt.domain.Gate;
import com.airport.mgmt.repositories.FlightRepository;
import lombok.extern.slf4j.Slf4j;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.web.server.ResponseStatusException;

@Slf4j
@Service
public class FlightService {
    private static final Logger logger = LoggerFactory.getLogger(FlightService.class);

    private final GateService gateService;
    private final FlightRepository repository;

    public FlightService(GateService gateService, FlightRepository repository) {
        this.gateService = gateService;
        this.repository = repository;
    }

    public Flight findByFlightNumber(String flightNumber) {
        return repository
                .findByFlightNumber(flightNumber)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND,
                        "Cannot find Flight by " + flightNumber));
    }

    public Flight assignGate(String flightNumber) {
        Flight flight = findByFlightNumber(flightNumber);

        if(flight.isAssignedToGate()) {
            log.info("Relocating the flight: {} from the gate: {} to a new gate", flightNumber, flight.getGate().getGateName());
            gateService.makeGateAvailable(flight.getGate().getGateName());
        }

        Gate gate = gateService.findAvailableGate();

        flight.linkGate(gate);
        gate.setInUse(true);
        log.info("Gate: {} is assigned to flight: {}", gate.getGateName(), flightNumber);

        return flight;
    }
}