/*
* This code has been generated by the Rebel: a code generator for modern Java.
* 
* Drop us a line or two at feedback@archetypesoftware.com: we would love to hear from you!
*/
package com.airport.mgmt.domain;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.*;
import java.time.*;

import javax.persistence.*;
import javax.validation.constraints.*;


// ----------- << imports@AAAAAAF2pLd8f8jiOoc= >>
import com.fasterxml.jackson.annotation.JsonIgnore;
// ----------- >>

@Entity
@Getter
@Setter
@NoArgsConstructor
// ----------- << class.annotations@AAAAAAF2pLd8f8jiOoc= >>
// ----------- >>
public class Gate {
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    // ----------- << id.annotations@AAAAAAF2pLd8f8jiOoc= >>
    // ----------- >>
    private Long id;

    @Version
    // ----------- << version.annotations@AAAAAAF2pLd8f8jiOoc= >>
    // ----------- >>
    private Long version;

    @NotNull
    @Column(unique = true, nullable = false)
    // ----------- << attribute.annotations@AAAAAAF2pLmNvcoXWJM= >>
    // ----------- >>
    private String gateName;

    @NotNull
    @Column(nullable = false)
    // ----------- << attribute.annotations@AAAAAAF2pLmoycodGng= >>
    // ----------- >>
    private LocalTime availableFrom;

    @NotNull
    @Column(nullable = false)
    // ----------- << attribute.annotations@AAAAAAF2pLmvCsojb/I= >>
    // ----------- >>
    private LocalTime availableTo;

    @Column(nullable = false)
    // ----------- << attribute.annotations@AAAAAAF2pLm1wsopNRk= >>
    // ----------- >>
    private boolean inUse;

    @OneToMany(mappedBy = "gate")
    // ----------- << attribute.annotations@AAAAAAF2pLzKnMq6nMU= >>
    @JsonIgnore
    // ----------- >>
    private Set<Flight> flights = new HashSet<>();

    // ----------- << getId.annotations@AAAAAAF2pLd8f8jiOoc= >>
    // ----------- >>
    public Long getId(){
        return id;
    }

    public Gate linkFlights(Flight _flights) {
        if (_flights != null) {
            _flights.unlinkGate();
            _flights.setGate(this);
            getFlights().add(_flights);
        }
        return this;
    }

    public Gate unlinkFlights(Flight _flights) {
        if (_flights != null) {
            _flights.setGate(null);
            getFlights().remove(_flights);
        }
        return this;
    }

    public Gate unlinkFlights(Flight _flights, Iterator<Flight> it) {
        if (_flights != null) {
            _flights.setGate(null);
            it.remove();
        }
        return this;
    }

    // ----------- << equals.annotations@AAAAAAF2pLd8f8jiOoc= >>
    // ----------- >>
    @Override
    public boolean equals(Object obj) {
        if (super.equals(obj)) return true;
        if (getId() == null) return false;
        return obj instanceof Gate && (getId().equals(((Gate) obj).getId()));
    }

    // ----------- << hashCode.annotations@AAAAAAF2pLd8f8jiOoc= >>
    // ----------- >>
    @Override
    public int hashCode() {
        return 291;
    }

// ----------- << class.extras@AAAAAAF2pLd8f8jiOoc= >>
// ----------- >>
}